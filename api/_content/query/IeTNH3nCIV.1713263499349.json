[{"_path":"/programming-languages/js/adding-method-dynamic","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Adding Method Dynamic","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"add-method-to-object-dynamically"},"children":[{"type":"text","value":"add method to object dynamically"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function Person(firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nconst member = new Person('Lydia', 'Hallie')\nconsole.log(member.getFullName()) // will throw error\n\nPerson.prototype.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`\n}\nconsole.log(member.getFullName()) // will run fine now\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Person(firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nconst member = new Person('Lydia', 'Hallie')\nconsole.log(member.getFullName()) // will throw error\n\nPerson.prototype.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`\n}\nconsole.log(member.getFullName()) // will run fine now\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"(from question 11)"},{"type":"element","tag":"span","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/lydiahallie/javascript-questions#11-whats-the-output","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/lydiahallie/javascript-questions#11-whats-the-output"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"add-method-to-object-dynamically","depth":3,"text":"add method to object dynamically"}]}},"_type":"markdown","_id":"content:programming-languages:js:adding-method-dynamic.md","_source":"content","_file":"programming-languages/js/adding-method-dynamic.md","_extension":"md"},{"_path":"/programming-languages/js/array-map","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Array Map","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"arrayprototypemap"},"children":[{"type":"text","value":"Array.prototype.map()"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"creates a new array"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"the function passed to map is run for each element"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2); // [2, 8, 18, 32]\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2); // [2, 8, 18, 32]\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"functional. requires a callback"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"arrayprototypemap","depth":3,"text":"Array.prototype.map()"}]}},"_type":"markdown","_id":"content:programming-languages:js:array-map.md","_source":"content","_file":"programming-languages/js/array-map.md","_extension":"md"},{"_path":"/programming-languages/js/array","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Array","description":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Arrayhttps://github.com/denysdovhan/wtfjs#true-is-false","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","rel":["nofollow"]},"children":[{"type":"text","value":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"}]},{"type":"element","tag":"a","props":{"href":"https://github.com/denysdovhan/wtfjs#true-is-false","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/denysdovhan/wtfjs#true-is-false"}]}]},{"type":"element","tag":"h3","props":{"id":"array-append-item-to-array-in-immutable-manner"},"children":[{"type":"text","value":"array: append item to array in immutable manner"}]},{"type":"element","tag":"pre","props":{"code":"- Mutable:\n  - to add: unshift, push\n  - to remove: shift, pop\n  - to remove from b/w: splice(startIndex, deleteCount)\n- Immutable:\n  - to add: concat\n  - to remove: slice(start,end)\n  - copy: spread\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- Mutable:\n  - to add: unshift, push\n  - to remove: shift, pop\n  - to remove from b/w: splice(startIndex, deleteCount)\n- Immutable:\n  - to add: concat\n  - to remove: slice(start,end)\n  - copy: spread\n"}]}]},{"type":"element","tag":"h3","props":{"id":"new-array"},"children":[{"type":"text","value":"new array"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Array.from({length:3},()=>0)"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"array-append-item-to-array-in-immutable-manner","depth":3,"text":"array: append item to array in immutable manner"},{"id":"new-array","depth":3,"text":"new array"}]}},"_type":"markdown","_id":"content:programming-languages:js:array.md","_source":"content","_file":"programming-languages/js/array.md","_extension":"md"},{"_path":"/programming-languages/js/arrow-functions","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Arrow Functions","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"arrow-functions"},"children":[{"type":"text","value":"Arrow functions"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"syntactic sugar. removed need for\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return keyword"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"function keyword"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"curly brackets"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"when-not-to-use-arrow-function"},"children":[{"type":"text","value":"When not to use arrow function"}]},{"type":"element","tag":"h4","props":{"id":"object-methods"},"children":[{"type":"text","value":"Object Methods"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const mario = {\n    lives: 3,\n    oneUp: () => {\n        this.lives++; // this will not update lives\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const mario = {\n    lives: 3,\n    oneUp: () => {\n        this.lives++; // this will not update lives\n    }\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Arrow function do not have their own "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"this"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"this.lives will refer to outer environment"}]}]},{"type":"element","tag":"h4","props":{"id":"object-prototype"},"children":[{"type":"text","value":"Object prototype"}]},{"type":"element","tag":"h4","props":{"id":"dynamic-context"},"children":[{"type":"text","value":"Dynamic context"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"arrow functions bind context statically. ie upon function declaration"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/better-programming/3-examples-of-when-not-to-use-javascript-arrow-functions-90eebfbf7bb0","rel":["nofollow"]},"children":[{"type":"text","value":"When not to use arrow functions"}]},{"type":"element","tag":"a","props":{"href":"https://github.com/lydiahallie/javascript-questions#3-whats-the-output","rel":["nofollow"]},"children":[{"type":"text","value":"Question that provoked this thought"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"arrow-functions","depth":2,"text":"Arrow functions","children":[{"id":"when-not-to-use-arrow-function","depth":3,"text":"When not to use arrow function"}]}]}},"_type":"markdown","_id":"content:programming-languages:js:arrow-functions.md","_source":"content","_file":"programming-languages/js/arrow-functions.md","_extension":"md"},{"_path":"/programming-languages/js/ascii","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Ascii","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"char-code"},"children":[{"type":"text","value":"char -> code"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"'a'.charCodeAt(0) // 97\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"'a'.charCodeAt(0) // 97\n"}]}]},{"type":"element","tag":"h3","props":{"id":"code-char"},"children":[{"type":"text","value":"code -> char"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"String.fromCharCode(97) // 'a'\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"String.fromCharCode(97) // 'a'\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"char-code","depth":3,"text":"char -> code"},{"id":"code-char","depth":3,"text":"code -> char"}]}},"_type":"markdown","_id":"content:programming-languages:js:ascii.md","_source":"content","_file":"programming-languages/js/ascii.md","_extension":"md"},{"_path":"/programming-languages/js/bit","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Bit","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"bit"},"children":[{"type":"text","value":"Bit"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"5 << 2 // 101 << 2 // 010100 // 16+4 //20\n5 >> 2 // 101 >> 2 // 01 // 2\n5 ^ 3 // 101 ^ 011 // 0110 // 6\n5 & 3 // 101 & 011 // 001 // 1 // always smaller or equal number\n5 | 3 // 101 | 011 // 111 // 7 // always bigger or equal number\n0 ^ 0 // 0\n1 ^ 1 // 0\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"5 << 2 // 101 << 2 // 010100 // 16+4 //20\n5 >> 2 // 101 >> 2 // 01 // 2\n5 ^ 3 // 101 ^ 011 // 0110 // 6\n5 & 3 // 101 & 011 // 001 // 1 // always smaller or equal number\n5 | 3 // 101 | 011 // 111 // 7 // always bigger or equal number\n0 ^ 0 // 0\n1 ^ 1 // 0\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"bit","depth":3,"text":"Bit"}]}},"_type":"markdown","_id":"content:programming-languages:js:bit.md","_source":"content","_file":"programming-languages/js/bit.md","_extension":"md"},{"_path":"/programming-languages/js/callbacks","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Callbacks","description":"","tag":"functional","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-are-callbacks"},"children":[{"type":"text","value":"what are callbacks?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Callbacks are the functions that are slipped or passed into another function to decide the invocation of that function."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"example in filter, the callback function tells JavaScript the criteria for how to filter an array."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Related to "},{"type":"element","tag":"a","props":{"href":"#lambda"},"children":[{"type":"text","value":"lambda"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-are-callbacks","depth":3,"text":"what are callbacks?"}]}},"_type":"markdown","_id":"content:programming-languages:js:callbacks.md","_source":"content","_file":"programming-languages/js/callbacks.md","_extension":"md"},{"_path":"/programming-languages/js/class-function","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Class Function","description":"","body":{"type":"root","children":[{"type":"element","tag":"h4","props":{"id":"class-vs-function"},"children":[{"type":"text","value":"class vs function"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// Class syntax\nclass Person {\n  constructor(first, last) {\n    this.first = first\n    this.last = last\n    // we can put getFullName here\n    // but then it'll be present on all object, wasting space\n    // this.getFullName = function() {\n    //     return `${this.first} ${this.last}`\n    // }\n  }\n  getFullName() {\n    return `${this.first} ${this.last}`\n  }\n}\n\n//Equivalent function syntax\nfunction Person(first, last) {\n  this.first = first\n  this.last = last\n  // we can put getFullName here\n  // but then it'll be present o all object, wasting space\n}\nPerson.prototype.getFullName = function () {\n  return `${this.first} ${this.last}`\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Class syntax\nclass Person {\n  constructor(first, last) {\n    this.first = first\n    this.last = last\n    // we can put getFullName here\n    // but then it'll be present on all object, wasting space\n    // this.getFullName = function() {\n    //     return `${this.first} ${this.last}`\n    // }\n  }\n  getFullName() {\n    return `${this.first} ${this.last}`\n  }\n}\n\n//Equivalent function syntax\nfunction Person(first, last) {\n  this.first = first\n  this.last = last\n  // we can put getFullName here\n  // but then it'll be present o all object, wasting space\n}\nPerson.prototype.getFullName = function () {\n  return `${this.first} ${this.last}`\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:programming-languages:js:class-function.md","_source":"content","_file":"programming-languages/js/class-function.md","_extension":"md"},{"_path":"/programming-languages/js/closure","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Closure","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-is-closure"},"children":[{"type":"text","value":"what is closure?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ability of function to remember value of variable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ability to remember even after the outer function is executed is called closure"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"record storing a function together with environment"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let Person = function(pName){\n    let name = pName\n    this.getName = function(){\n        return name;\n    }\n}\nlet person = new Person(\"Sanyam\")\nperson.getName() // \"Sanyam\"\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let Person = function(pName){\n    let name = pName\n    this.getName = function(){\n        return name;\n    }\n}\nlet person = new Person(\"Sanyam\")\nperson.getName() // \"Sanyam\"\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"helps in data privacy"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"helps in currying"}]}]},{"type":"element","tag":"h4","props":{"id":"related-questions"},"children":[{"type":"text","value":"Related questions"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"could we create objects if closure was not provided by JS?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"make public prop private by creating variable within constructor function"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// old\nfunction Bird(){\n    this.name = 'donald'\n}\nb = new Bird()\nb.name // \"donald\", can be modified also\n\n// better + secure\nfunction Bird(){\n    let name = 'donald'\n    this.getName = function(){\n        return name\n    }\n}\nb = new Bird()\nb.name // undefined\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// old\nfunction Bird(){\n    this.name = 'donald'\n}\nb = new Bird()\nb.name // \"donald\", can be modified also\n\n// better + secure\nfunction Bird(){\n    let name = 'donald'\n    this.getName = function(){\n        return name\n    }\n}\nb = new Bird()\nb.name // undefined\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-closure","depth":3,"text":"what is closure?"}]}},"_type":"markdown","_id":"content:programming-languages:js:closure.md","_source":"content","_file":"programming-languages/js/closure.md","_extension":"md"},{"_path":"/programming-languages/js/constructor-property","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Constructor Property","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"constructor-property-on-objects"},"children":[{"type":"text","value":"Constructor property on objects"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"used to get reference to the constructor that created this object"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let duck = new Bird()\nlet beagle = new Dog()\nconsole.log(duck.constructor === Bird)\nconsole.log(beagle.constructor === Dog)\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let duck = new Bird()\nlet beagle = new Dog()\nconsole.log(duck.constructor === Bird)\nconsole.log(beagle.constructor === Dog)\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"can be overwritten, therefore better to use instanceof method to check type of object"}]}]},{"type":"element","tag":"h4","props":{"id":"objects-can-be-created-without-constructor"},"children":[{"type":"text","value":"objects can be created without constructor"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"var superProto = {\n    name:'sanyam'\n}\nsuperProto.constructor // Object(){}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var superProto = {\n    name:'sanyam'\n}\nsuperProto.constructor // Object(){}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"constructor-property-on-objects","depth":3,"text":"Constructor property on objects"}]}},"_type":"markdown","_id":"content:programming-languages:js:constructor-property.md","_source":"content","_file":"programming-languages/js/constructor-property.md","_extension":"md"},{"_path":"/programming-languages/js/constructor","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Constructor","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"multiple-constructor-possible"},"children":[{"type":"text","value":"Multiple constructor possible?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"No. Since "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"function overloading is not present"}]},{"type":"text","value":" we can have only Single constructor."}]},{"type":"element","tag":"h3","props":{"id":"hack"},"children":[{"type":"text","value":"Hack"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"js function can take any number of arguments"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"it becomes duty of developer to check parameters and work accordingly"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// normal way\nfunction Student(name) {\n  this.name = name\n  this.age = 24\n}\n\n// if params are not fixed\nfunction Student(name, age) {\n  if (age === undefined) {\n    age = 24\n  }\n  this.name = name\n  this.age = age\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// normal way\nfunction Student(name) {\n  this.name = name\n  this.age = 24\n}\n\n// if params are not fixed\nfunction Student(name, age) {\n  if (age === undefined) {\n    age = 24\n  }\n  this.name = name\n  this.age = age\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"multiple-constructor-possible","depth":2,"text":"Multiple constructor possible?","children":[{"id":"hack","depth":3,"text":"Hack"}]}]}},"_type":"markdown","_id":"content:programming-languages:js:constructor.md","_source":"content","_file":"programming-languages/js/constructor.md","_extension":"md"},{"_path":"/programming-languages/js/creating-constructor","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Creating Constructor","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"creating-a-constructor"},"children":[{"type":"text","value":"creating a constructor"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"function that create new object"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"most important keyword is "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":", otherwise object won't be created"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Defined with a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"capitalized name"}]},{"type":"text","value":" to distinguish from other functions that are not constructors."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Constructors use the keyword "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" to set properties of the object they will create. Inside the constructor, this refers to the new object it will create."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Constructors "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"define properties and behaviors instead of returning a value"}]},{"type":"text","value":" as other functions might"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"properties are generally "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"intialized with parameters"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"loosely they are like Java classes+constructor"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function Animal(){\n    this.name  = \"goofy\"\n    this.numLegs = 2\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Animal(){\n    this.name  = \"goofy\"\n    this.numLegs = 2\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"creating-a-constructor","depth":3,"text":"creating a constructor"}]}},"_type":"markdown","_id":"content:programming-languages:js:creating-constructor.md","_source":"content","_file":"programming-languages/js/creating-constructor.md","_extension":"md"},{"_path":"/programming-languages/js/currying","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Currying","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"what-is-currying"},"children":[{"type":"text","value":"what is currying?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"currying function means, converting N parameter function to N functions with 1 parameter"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"very interesting! very clean with arrow functions"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const add = x => y => z => x+y+z\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const add = x => y => z => x+y+z\n"}]}]},{"type":"element","tag":"h3","props":{"id":"where-is-it-useful"},"children":[{"type":"text","value":"where is it useful?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"when you cannot supply all arguments to function at one time"}]}]},{"type":"element","tag":"h3","props":{"id":"cons"},"children":[{"type":"text","value":"cons"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if param is increased, will have to change defination or wrap inside another function"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-currying","depth":2,"text":"what is currying?","children":[{"id":"where-is-it-useful","depth":3,"text":"where is it useful?"},{"id":"cons","depth":3,"text":"cons"}]}]}},"_type":"markdown","_id":"content:programming-languages:js:currying.md","_source":"content","_file":"programming-languages/js/currying.md","_extension":"md"},{"_path":"/programming-languages/js/data-types","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Data Types","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"data-types"},"children":[{"type":"text","value":"Data Types"}]},{"type":"element","tag":"h3","props":{"id":"primitives"},"children":[{"type":"text","value":"Primitives"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"- undefined\n- null\n- boolean\n- Number\n- String\n- BigInt\n- Symbol\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- undefined\n- null\n- boolean\n- Number\n- String\n- BigInt\n- Symbol\n"}]}]},{"type":"element","tag":"h3","props":{"id":"structural"},"children":[{"type":"text","value":"Structural"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"- Object //anything made with new operator\n- Function\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- Object //anything made with new operator\n- Function\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"data-types","depth":2,"text":"Data Types","children":[{"id":"primitives","depth":3,"text":"Primitives"},{"id":"structural","depth":3,"text":"Structural"}]}]}},"_type":"markdown","_id":"content:programming-languages:js:data-types.md","_source":"content","_file":"programming-languages/js/data-types.md","_extension":"md"},{"_path":"/programming-languages/js/debugging","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Debugging","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"debugging"},"children":[{"type":"text","value":"Debugging"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"console.log()"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"console.clear()"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"typeof"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"=== vs ==; === checks for type as well as value. == checks only for value"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"falsy values: "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"false, 0, \"\", NaN, undefined, null"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"debugging","depth":3,"text":"Debugging"}]}},"_type":"markdown","_id":"content:programming-languages:js:debugging.md","_source":"content","_file":"programming-languages/js/debugging.md","_extension":"md"},{"_path":"/programming-languages/js/enhanced-for","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Enhanced For","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"forin-vs-forof"},"children":[{"type":"text","value":"for..in vs for..of"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"for(let i in object) // key\n\nfor(let i of object) // Error. Object is not iterable\n\nfor(let i in array) // index\n\nfor(let i of array) // item\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"for(let i in object) // key\n\nfor(let i of object) // Error. Object is not iterable\n\nfor(let i in array) // index\n\nfor(let i of array) // item\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"in is a keyword used to get "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"property"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"forin-vs-forof","depth":3,"text":"for..in vs for..of"}]}},"_type":"markdown","_id":"content:programming-languages:js:enhanced-for.md","_source":"content","_file":"programming-languages/js/enhanced-for.md","_extension":"md"},{"_path":"/programming-languages/js/first-class-functions","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"First Class Functions","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-are-first-class-functions"},"children":[{"type":"text","value":"what are first class functions?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions that can\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"be assigned to a variable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"passed into another function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"returned from another function like normal value"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"in js, all functions are first class functions"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-are-first-class-functions","depth":3,"text":"what are first class functions?"}]}},"_type":"markdown","_id":"content:programming-languages:js:first-class-functions.md","_source":"content","_file":"programming-languages/js/first-class-functions.md","_extension":"md"},{"_path":"/programming-languages/js/function","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Function","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-are-functions-in-js"},"children":[{"type":"text","value":"what are functions in JS?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions are special type of object"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"the code you write for function, isn't the actual function\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"it is an object with properties"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"They property is invocable."}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-are-functions-in-js","depth":3,"text":"what are functions in JS?"}]}},"_type":"markdown","_id":"content:programming-languages:js:function.md","_source":"content","_file":"programming-languages/js/function.md","_extension":"md"},{"_path":"/programming-languages/js/good-questions","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Good Questions","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"good-questions-js"},"children":[{"type":"text","value":"Good Questions JS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1, 2, 3, 8, 10, 11, 12, 14, 15\n(Link)"},{"type":"element","tag":"span","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/lydiahallie/javascript-questions#11-whats-the-output","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/lydiahallie/javascript-questions#11-whats-the-output"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"good-questions-js","depth":3,"text":"Good Questions JS"}]}},"_type":"markdown","_id":"content:programming-languages:js:good-questions.md","_source":"content","_file":"programming-languages/js/good-questions.md","_extension":"md"},{"_path":"/programming-languages/js/has-own-property","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Has Own Property","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"hasownproperty"},"children":[{"type":"text","value":"hasOwnProperty"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\n\n\ncanary.hasOwnProperty('name') //true\n\n'age' in canary //true or false\n                //based on whether it is present in prototype chain\n                //or not\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\n\n\ncanary.hasOwnProperty('name') //true\n\n'age' in canary //true or false\n                //based on whether it is present in prototype chain\n                //or not\n"}]}]},{"type":"element","tag":"h3","props":{"id":"can-be-confused-with"},"children":[{"type":"text","value":"can be confused with"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" keyword\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"in checks complete prototype chain."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hasOwnProperty checks properties on current object"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\nb = new Bird()\nb.hasOwnProperty('name') // true\nb.hasOwnProperty('numLegs') // false\n'name' in b // true\n'numLegs' in b // true\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\nb = new Bird()\nb.hasOwnProperty('name') // true\nb.hasOwnProperty('numLegs') // false\n'name' in b // true\n'numLegs' in b // true\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"hasownproperty","depth":3,"text":"hasOwnProperty"},{"id":"can-be-confused-with","depth":3,"text":"can be confused with"}]}},"_type":"markdown","_id":"content:programming-languages:js:has-own-property.md","_source":"content","_file":"programming-languages/js/has-own-property.md","_extension":"md"},{"_path":"/programming-languages/js/hashmap-map-set","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Hashmap Map Set","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"map-key-value"},"children":[{"type":"text","value":"Map (key, value)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"set, get"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const hashmap = new Map()\nhashmap.set('sanyam', 30)\nhashmap.get('sanyam') // 30\n\nhashmap.has('sanyam') // true\nhashmap.size // 1\nfor (const [key, value] of hashmap) {\n  console.log('key,value', key, value)\n}\nhashmap.get('anisha') // undefined\nhashmap.delete('sanyam')\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const hashmap = new Map()\nhashmap.set('sanyam', 30)\nhashmap.get('sanyam') // 30\n\nhashmap.has('sanyam') // true\nhashmap.size // 1\nfor (const [key, value] of hashmap) {\n  console.log('key,value', key, value)\n}\nhashmap.get('anisha') // undefined\nhashmap.delete('sanyam')\n"}]}]},{"type":"element","tag":"h3","props":{"id":"set-value"},"children":[{"type":"text","value":"Set (value)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"used when you just want to check existence"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"add"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const set = new Set()\nset.add('sanyam')\n\nset.has('sanyam') // true\nset.size // 1\nset.delete('sanyam')\n\nconst a = [1, 2, 1, 2]\nconst unique = new Set(a) //{1,2}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const set = new Set()\nset.add('sanyam')\n\nset.has('sanyam') // true\nset.size // 1\nset.delete('sanyam')\n\nconst a = [1, 2, 1, 2]\nconst unique = new Set(a) //{1,2}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"map-key-value","depth":3,"text":"Map (key, value)"},{"id":"set-value","depth":3,"text":"Set (value)"}]}},"_type":"markdown","_id":"content:programming-languages:js:hashmap-map-set.md","_source":"content","_file":"programming-languages/js/hashmap-map-set.md","_extension":"md"},{"_path":"/programming-languages/js/higher-order-functions","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Higher Order Functions","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-are-higher-order-functions"},"children":[{"type":"text","value":"what are higher order functions?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions that\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"take function as argument"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"or return function as value"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-are-higher-order-functions","depth":3,"text":"what are higher order functions?"}]}},"_type":"markdown","_id":"content:programming-languages:js:higher-order-functions.md","_source":"content","_file":"programming-languages/js/higher-order-functions.md","_extension":"md"},{"_path":"/programming-languages/js/hoisting","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Hoisting","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-is-hoisting"},"children":[{"type":"text","value":"what is hoisting?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"able to access a variable before declaration"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"js raises up(hoists) the declarations"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"catName('kitty') // cat name is kitty\nfunction catName(name){\n    console.log('cat name is', name)\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"catName('kitty') // cat name is kitty\nfunction catName(name){\n    console.log('cat name is', name)\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"works with function & var. does not work with let, const"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-hoisting","depth":3,"text":"what is hoisting?"}]}},"_type":"markdown","_id":"content:programming-languages:js:hoisting.md","_source":"content","_file":"programming-languages/js/hoisting.md","_extension":"md"},{"_path":"/programming-languages/js/iife","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Iife","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"iife-immediately-invoked-function-expression"},"children":[{"type":"text","value":"iife -> Immediately Invoked Function Expression"}]},{"type":"element","tag":"h4","props":{"id":"usage"},"children":[{"type":"text","value":"usage"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"group related functionality into single object or module"}]}]},{"type":"element","tag":"h4","props":{"id":"doubt"},"children":[{"type":"text","value":"doubt"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"why can't we use {} directly"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"iife-immediately-invoked-function-expression","depth":3,"text":"iife -> Immediately Invoked Function Expression"}]}},"_type":"markdown","_id":"content:programming-languages:js:iife.md","_source":"content","_file":"programming-languages/js/iife.md","_extension":"md"},{"_path":"/programming-languages/js/inheritance","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Inheritance","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"inhertiance"},"children":[{"type":"text","value":"inhertiance"}]},{"type":"element","tag":"h4","props":{"id":"using-functions"},"children":[{"type":"text","value":"using functions"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"    // let animal = new Animal() // has some disadvantage, therefore not used\n    // 1. Create Instance of parent\n    let Animal = function(){}\n    Animal.prototype.eat = function(){\n        return 'nom nom'\n    }\n\n    // 2. Set prototype of child to be instance of parent & update constructor\n    let Bird = function(){}\n    Bird.prototype = Object.create(Animal.prototype)\n    Bird.prototype.constructor = Bird\n\n    // 3. add own methods\n    Bird.prototype.fly = function(){\n        return 'i can fly'\n    }\n\n    // 4. Override parent method\n    Bird.prototype.eat = function(){\n        return 'eating nicely'\n    }\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    // let animal = new Animal() // has some disadvantage, therefore not used\n    // 1. Create Instance of parent\n    let Animal = function(){}\n    Animal.prototype.eat = function(){\n        return 'nom nom'\n    }\n\n    // 2. Set prototype of child to be instance of parent & update constructor\n    let Bird = function(){}\n    Bird.prototype = Object.create(Animal.prototype)\n    Bird.prototype.constructor = Bird\n\n    // 3. add own methods\n    Bird.prototype.fly = function(){\n        return 'i can fly'\n    }\n\n    // 4. Override parent method\n    Bird.prototype.eat = function(){\n        return 'eating nicely'\n    }\n"}]}]},{"type":"element","tag":"h3","props":{"id":"above-example-using-classes"},"children":[{"type":"text","value":"above example using classes"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"class Animal{\n    eat(){\n        return 'nom nom'\n    }\n}\nclass Bird extends Animal{\n    fly(){\n        return 'I can fly!'\n    }\n    // override\n    eat(){\n        return 'burp burp'\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Animal{\n    eat(){\n        return 'nom nom'\n    }\n}\nclass Bird extends Animal{\n    fly(){\n        return 'I can fly!'\n    }\n    // override\n    eat(){\n        return 'burp burp'\n    }\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"mixin"},"children":[{"type":"text","value":"Mixin"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"added to object not constructor, therefore "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"protoype"}]},{"type":"text","value":" is not used"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"add unrelated function to both obj"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let flyMixin = function(obj){\n    obj.fly = function(){\n        console.log('i am flying')\n    }\n}\nflyMixin(bird)\nflyMixin(airplane)\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let flyMixin = function(obj){\n    obj.fly = function(){\n        console.log('i am flying')\n    }\n}\nflyMixin(bird)\nflyMixin(airplane)\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"inhertiance","depth":3,"text":"inhertiance"},{"id":"above-example-using-classes","depth":3,"text":"above example using classes"},{"id":"mixin","depth":3,"text":"Mixin"}]}},"_type":"markdown","_id":"content:programming-languages:js:inheritance.md","_source":"content","_file":"programming-languages/js/inheritance.md","_extension":"md"},{"_path":"/programming-languages/js/instanceof","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"InstanceOf","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"instanceof"},"children":[{"type":"text","value":"instanceof"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"complete keyword is in lower case"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let a = new Animal()\na instanceof Object //true\na instanceof Animal //true\na instanceof People //false\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let a = new Animal()\na instanceof Object //true\na instanceof Animal //true\na instanceof People //false\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"instanceof","depth":3,"text":"instanceof"}]}},"_type":"markdown","_id":"content:programming-languages:js:instanceOf.md","_source":"content","_file":"programming-languages/js/instanceOf.md","_extension":"md"},{"_path":"/programming-languages/js/is-prototype-of","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Is Prototype Of","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"isprototypeof"},"children":[{"type":"text","value":"isPrototypeOf"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"generally used when you don't have constructor functions"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"Dog.prototype.isPrototypeOf(beagle) // with constructor function, use prototype\nbeagle.isPrototypeOf(goofy) // can directly used with object\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Dog.prototype.isPrototypeOf(beagle) // with constructor function, use prototype\nbeagle.isPrototypeOf(goofy) // can directly used with object\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"all objects have prototype"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"prototype is an object"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"therefore an object's prototype can have its own prototype"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"object.prototype.prototype\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"object.prototype.prototype\n"}]}]},{"type":"element","tag":"h4","props":{"id":"related-to-instanceof"},"children":[{"type":"text","value":"related to instanceof"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"when you don't have constructor function to use with instanceof"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"var superProto = {\n    // some super properties\n}\n\nvar subProto = Object.create(superProto);\nsubProto.someProp = 5;\n\nvar sub = Object.create(subProto);\n\nconsole.log(superProto.isPrototypeOf(sub));  // **true**\nconsole.log(sub instanceof superProto);      // TypeError\nconsole.log(sub instanceof superProto.constructor)  // true\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var superProto = {\n    // some super properties\n}\n\nvar subProto = Object.create(superProto);\nsubProto.someProp = 5;\n\nvar sub = Object.create(subProto);\n\nconsole.log(superProto.isPrototypeOf(sub));  // **true**\nconsole.log(sub instanceof superProto);      // TypeError\nconsole.log(sub instanceof superProto.constructor)  // true\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"isprototypeof","depth":3,"text":"isPrototypeOf"}]}},"_type":"markdown","_id":"content:programming-languages:js:is-prototype-of.md","_source":"content","_file":"programming-languages/js/is-prototype-of.md","_extension":"md"},{"_path":"/programming-languages/js/lambda","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Lambda","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-is-lambda"},"children":[{"type":"text","value":"what is lambda?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions that are passed as argument or returned as value"}]}]},{"type":"element","tag":"h4","props":{"id":"lambda-vs-callbacks"},"children":[{"type":"text","value":"lambda vs callbacks"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"lambda - anonymous"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"callbacks - named or anonymous"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"all lambda can be callback but not all callback may be lambda"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-lambda","depth":3,"text":"what is lambda?"}]}},"_type":"markdown","_id":"content:programming-languages:js:lambda.md","_source":"content","_file":"programming-languages/js/lambda.md","_extension":"md"},{"_path":"/programming-languages/js/memoization","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Memoization","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-is-memoization"},"children":[{"type":"text","value":"what is memoization?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"optimizing technique used to speed up program by storing result of expensive function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return cached result when same input occurs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"built on 2 concepts\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"closure"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"higher order functions"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function memorizer(fun) {\n  let cache = {}\n  return function (n) {\n    if (cache[n] !== undefined) {\n      return cache[n]\n    }\n    let result = fun(n)\n    cache[n] = result\n    return result\n  }\n}\nconst addOne = memorizer((num: number) => num + 1)\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function memorizer(fun) {\n  let cache = {}\n  return function (n) {\n    if (cache[n] !== undefined) {\n      return cache[n]\n    }\n    let result = fun(n)\n    cache[n] = result\n    return result\n  }\n}\nconst addOne = memorizer((num: number) => num + 1)\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"first call takes time but for next calls, result comes from cache"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-memoization","depth":3,"text":"what is memoization?"}]}},"_type":"markdown","_id":"content:programming-languages:js:memoization.md","_source":"content","_file":"programming-languages/js/memoization.md","_extension":"md"},{"_path":"/programming-languages/js/new-keyword","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"New Keyword","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"use-of-new-keyword"},"children":[{"type":"text","value":"use of new keyword"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When using new, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" refers to the new empty object we create. However, if you don't add "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":", this refers to the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"global"}]},{"type":"text","value":" object!"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\nconst sarah = Person('Sarah', 'Smith');\nconsole.log(sarah); // undefined, since Person didn't return anything\nconsole.log(this.firstName); //'Sarah', sicne firstName is now defined on global/window object\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\nconst sarah = Person('Sarah', 'Smith');\nconsole.log(sarah); // undefined, since Person didn't return anything\nconsole.log(this.firstName); //'Sarah', sicne firstName is now defined on global/window object\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"use-of-new-keyword","depth":3,"text":"use of new keyword"}]}},"_type":"markdown","_id":"content:programming-languages:js:new-keyword.md","_source":"content","_file":"programming-languages/js/new-keyword.md","_extension":"md"},{"_path":"/programming-languages/js/object-create","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Object Create","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"what-is-objectcreate"},"children":[{"type":"text","value":"what is Object.create()"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"used to create object, using existing object as prototype"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`)\n  },\n}\n\nconst me = Object.create(person)\n\nme.name = 'Matthew' // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true // inherited properties can be overwritten\n\nme.printIntroduction()\n// expected output: \"My name is Matthew. Am I human? true\"\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`)\n  },\n}\n\nconst me = Object.create(person)\n\nme.name = 'Matthew' // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true // inherited properties can be overwritten\n\nme.printIntroduction()\n// expected output: \"My name is Matthew. Am I human? true\"\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-objectcreate","depth":3,"text":"what is Object.create()"}]}},"_type":"markdown","_id":"content:programming-languages:js:object-create.md","_source":"content","_file":"programming-languages/js/object-create.md","_extension":"md"},{"_path":"/programming-languages/js/object","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Object","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"object-make-copy"},"children":[{"type":"text","value":"object: make copy"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Object.assign(target, source1, source2)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if target is not {}, it'll modify target"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"target, source1. then target, source2. therefore keys from source2 will take precendence"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"object-make-copy","depth":3,"text":"object: make copy"}]}},"_type":"markdown","_id":"content:programming-languages:js:object.md","_source":"content","_file":"programming-languages/js/object.md","_extension":"md"},{"_path":"/programming-languages/js/prototype-properties","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Prototype Properties","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"prototype-properties"},"children":[{"type":"text","value":"Prototype properties"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"properties in prototype are shared among all the objects"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"ConstructorName.prototype.propertyName = value\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ConstructorName.prototype.propertyName = value\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cannot add from object, needs to be added from constructor"}]}]},{"type":"element","tag":"h4","props":{"id":"pros"},"children":[{"type":"text","value":"pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"helps in saving memory"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reducing duplicate variables"}]}]},{"type":"element","tag":"h3","props":{"id":"related"},"children":[{"type":"text","value":"related"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hasOwnProperty"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"but problem with above is that constructor property is lost, therefore we redefine it"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    constructor: Dog,\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    constructor: Dog,\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"prototype-properties","depth":3,"text":"Prototype properties"},{"id":"related","depth":3,"text":"related"}]}},"_type":"markdown","_id":"content:programming-languages:js:prototype-properties.md","_source":"content","_file":"programming-languages/js/prototype-properties.md","_extension":"md"},{"_path":"/programming-languages/js/reduce","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Reduce","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"arrayprototypereduce"},"children":[{"type":"text","value":"Array.prototype.reduce()"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"arrayprototypereduce","depth":2,"text":"Array.prototype.reduce()"}]}},"_type":"markdown","_id":"content:programming-languages:js:reduce.md","_source":"content","_file":"programming-languages/js/reduce.md","_extension":"md"},{"_path":"/programming-languages/js/regex","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Regex","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"regex"},"children":[{"type":"text","value":"regex"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Single Match\n"},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const index = 'Some text'.search(regex)\nreturns int-> -1 or i>=0\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const index = 'Some text'.search(regex)\nreturns int-> -1 or i>=0\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"no use of /g"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Multiple match\n"},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const matches = 'Some text'.match(regex)\nreturns null or {index:3, input:'Some text'}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const matches = 'Some text'.match(regex)\nreturns null or {index:3, input:'Some text'}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"returns multiple match if /g"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"replace\n"},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const next = 'Some text'.replace(regex,'hi mom')\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const next = 'Some text'.replace(regex,'hi mom')\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"regex\n"},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const regex = /bob/g -> match bob\nconst regex = /bob|alice/g -> match bob or alice\nconst regex = /(bob|alice) Jones/g -> match bob jones or alice jones\nconst regex = /colou?r/g -> matches color, colour ?-> 0 or 1\nconst regex = /color*/ -> matches color, colorrr *-> 0 or multiple\nconst regex = /color+/ -> matches color, colorrr +-> 1 or multiple\nconst regex = /color{2,3}/ -> matches colorr, colorrr, but not color {min, mix}\n\\ -> escape special character\n\\d -> digit\n\\w -> word character\n\\D -> not digit\n\\W -> not word character\n[A-Z] -> b/w a-z\n[^A-Z]-> not b/w a-z\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const regex = /bob/g -> match bob\nconst regex = /bob|alice/g -> match bob or alice\nconst regex = /(bob|alice) Jones/g -> match bob jones or alice jones\nconst regex = /colou?r/g -> matches color, colour ?-> 0 or 1\nconst regex = /color*/ -> matches color, colorrr *-> 0 or multiple\nconst regex = /color+/ -> matches color, colorrr +-> 1 or multiple\nconst regex = /color{2,3}/ -> matches colorr, colorrr, but not color {min, mix}\n\\ -> escape special character\n\\d -> digit\n\\w -> word character\n\\D -> not digit\n\\W -> not word character\n[A-Z] -> b/w a-z\n[^A-Z]-> not b/w a-z\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"2 ways to created\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"literal notion"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/sanyam/gi\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/sanyam/gi\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"used when it will remain constant"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ex: in loops"}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"constructor function"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"new RegExp('sanyam','gi')\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"new RegExp('sanyam','gi')\n"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"regex","depth":2,"text":"regex"}]}},"_type":"markdown","_id":"content:programming-languages:js:regex.md","_source":"content","_file":"programming-languages/js/regex.md","_extension":"md"},{"_path":"/programming-languages/js/sort-array","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Sort Array","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"arrayprototypesort"},"children":[{"type":"text","value":"Array.prototype.sort()"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"does in place & also returns sorted array"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sorting is peculiar\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"converts elements to string, then compares them"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sorts in ascending order"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const months = ['March', 'Jan', 'Feb', 'Dec']\nmonths.sort() // [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\nconst nums = [1, 30, 4, 21, 100000]\nnums.sort() // [1, 100000, 21, 30, 4]\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const months = ['March', 'Jan', 'Feb', 'Dec']\nmonths.sort() // [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\nconst nums = [1, 30, 4, 21, 100000]\nnums.sort() // [1, 100000, 21, 30, 4]\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We can see, Numbers are not sorted!"}]}]},{"type":"element","tag":"h3","props":{"id":"correct-way-to-sort-num-array"},"children":[{"type":"text","value":"Correct way to sort num array"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"nums.sort((first, second) => first - second)\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nums.sort((first, second) => first - second)\n"}]}]},{"type":"element","tag":"h3","props":{"id":"correct-way-to-sort-date-array"},"children":[{"type":"text","value":"Correct way to sort date array"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"dates.sort((first, second) => new Date(first) - new Date(second))\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"dates.sort((first, second) => new Date(first) - new Date(second))\n"}]}]},{"type":"element","tag":"h3","props":{"id":"correct-way-to-sort-string"},"children":[{"type":"text","value":"correct way to sort string"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"strings.sort((first, second))=>{\n  if(first<second){\n    // natural order is ascending order. here we do not want to change anything so return -1\n    return -1\n  }\n  return 1\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"strings.sort((first, second))=>{\n  if(first<second){\n    // natural order is ascending order. here we do not want to change anything so return -1\n    return -1\n  }\n  return 1\n})\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"functional. requires a callback to sort"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"arrayprototypesort","depth":2,"text":"Array.prototype.sort()","children":[{"id":"correct-way-to-sort-num-array","depth":3,"text":"Correct way to sort num array"},{"id":"correct-way-to-sort-date-array","depth":3,"text":"Correct way to sort date array"},{"id":"correct-way-to-sort-string","depth":3,"text":"correct way to sort string"}]}]}},"_type":"markdown","_id":"content:programming-languages:js:sort-array.md","_source":"content","_file":"programming-languages/js/sort-array.md","_extension":"md"},{"_path":"/programming-languages/js/spread","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Spread","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"spread-syntax"},"children":[{"type":"text","value":"Spread Syntax"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Allows spreading array, string"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let a = [1, 2, 3]\nconsole.log(a) //[1,2,3]\nconsole.log(...a) //1 2 3\nlet b = 'sanyam'\nconsole.log(b) //sanyam\nconsole.log(...b) //s a n y a m\nlet c = { name: 'sanyam' }\nlet d = { age: 20 }\nconsole.log({ ...c, ...d }) //{'name':'sanyam':'age':20}\nconsole.log(...c) // Error: non-callable iterator\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let a = [1, 2, 3]\nconsole.log(a) //[1,2,3]\nconsole.log(...a) //1 2 3\nlet b = 'sanyam'\nconsole.log(b) //sanyam\nconsole.log(...b) //s a n y a m\nlet c = { name: 'sanyam' }\nlet d = { age: 20 }\nconsole.log({ ...c, ...d }) //{'name':'sanyam':'age':20}\nconsole.log(...c) // Error: non-callable iterator\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"better than Function.prototype.apply(context, array)"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"used to mainly call function with array as arugment"},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function sum(x, y, z) {\n  return x + y + z\n}\n\nconst numbers = [1, 2, 3]\n\nconsole.log(sum(...numbers))\n// expected output: 6\n\nconsole.log(sum.apply(null, numbers))\n// expected output: 6\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function sum(x, y, z) {\n  return x + y + z\n}\n\nconst numbers = [1, 2, 3]\n\nconsole.log(sum(...numbers))\n// expected output: 6\n\nconsole.log(sum.apply(null, numbers))\n// expected output: 6\n"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","rel":["nofollow"]},"children":[{"type":"text","value":"MDN on Spread_Syntax"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"spread-syntax","depth":3,"text":"Spread Syntax"}]}},"_type":"markdown","_id":"content:programming-languages:js:spread.md","_source":"content","_file":"programming-languages/js/spread.md","_extension":"md"},{"_path":"/programming-languages/js/static-method","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Static Method","description":"","body":{"type":"root","children":[{"type":"element","tag":"h4","props":{"id":"static-method"},"children":[{"type":"text","value":"Static method"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"live only on constructor they are created"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cannot be passed down to their children"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:programming-languages:js:static-method.md","_source":"content","_file":"programming-languages/js/static-method.md","_extension":"md"}]