{"_path":"/computer-science/paradigms/functional/intro","_dir":"functional","_draft":false,"_partial":false,"_locale":"","title":"Intro","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"why"},"children":[{"type":"text","value":"Why?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Functional programming is an approach to software development based around the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"evaluation of functions"}]},{"type":"text","value":". Like mathematics, functions in programming map input to output to produce a result. You can combine basic functions in many ways to build more and more complex programs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Functional programming follows a few core principles:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Functions are independent from the state of the program or global variables. They only depend on the arguments passed into them to make a calculation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Functions try to limit any changes to the state of the program and avoid changes to the global objects holding data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Functions have minimal side effects in the program"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The functional programming software development approach breaks a program into small, testable parts."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"INPUT -> PROCESS -> OUTPUT"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Functional programming is about:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Pure functions - the same input always gives the same output"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"why","depth":3,"text":"Why?"}]}},"_type":"markdown","_id":"content:computer-science:paradigms:functional:intro.md","_source":"content","_file":"computer-science/paradigms/functional/intro.md","_extension":"md"}