{"_path":"/concurrency/javascript/complete-working","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Complete Working","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"complete-working"},"children":[{"type":"text","value":"Complete Working"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"All functions in that are currently in the call stack get executed. When they returned a value, they get popped off the stack."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When the call stack is empty, all queued up microtasks are popped onto the callstack one by one, and get executed! (Microtasks themselves can also return new microtasks, effectively creating an infinite microtask loop ðŸ˜¬)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If both the call stack and microtask queue are empty, the event loop checks if there are tasks left on the (macro)task queue. The tasks get popped onto the callstack, executed, and popped off!"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const callStack = []\nconst microTaskQueue = []\nconst animationQueue = []\nconst taskQueue = []\nwhile (1) {\n  while (callStack.length != 0) {\n    const item = callStack.pop()\n    process(item) // can generate new element on stack; therefore can lead to stack overflow\n  }\n\n  while (microTaskQueue.length > 0) {\n    const item = microTaskQueue.shift()\n    process(item) // can generate new microtask; can create infinite loop\n  }\n\n  const temp = animationQueue\n  animationQueue = []\n  while (temp.length > 0) {\n    const item = temp.shift()\n    process(item) // new items will be added to animationQueue which is different than this\n  }\n\n  if (taskQueue.length != 0) {\n    const item = taskQueue.shift()\n    callStack.push(item)\n  }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const callStack = []\nconst microTaskQueue = []\nconst animationQueue = []\nconst taskQueue = []\nwhile (1) {\n  while (callStack.length != 0) {\n    const item = callStack.pop()\n    process(item) // can generate new element on stack; therefore can lead to stack overflow\n  }\n\n  while (microTaskQueue.length > 0) {\n    const item = microTaskQueue.shift()\n    process(item) // can generate new microtask; can create infinite loop\n  }\n\n  const temp = animationQueue\n  animationQueue = []\n  while (temp.length > 0) {\n    const item = temp.shift()\n    process(item) // new items will be added to animationQueue which is different than this\n  }\n\n  if (taskQueue.length != 0) {\n    const item = taskQueue.shift()\n    callStack.push(item)\n  }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"complete-working","depth":2,"text":"Complete Working"}]}},"_type":"markdown","_id":"content:concurrency:javascript:7. Complete working.md","_source":"content","_file":"concurrency/javascript/7. Complete working.md","_extension":"md"}