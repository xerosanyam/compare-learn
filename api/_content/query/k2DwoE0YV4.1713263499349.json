{"_path":"/programming-languages/js/prototype-properties","_dir":"js","_draft":false,"_partial":false,"_locale":"","title":"Prototype Properties","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"prototype-properties"},"children":[{"type":"text","value":"Prototype properties"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"properties in prototype are shared among all the objects"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"ConstructorName.prototype.propertyName = value\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ConstructorName.prototype.propertyName = value\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cannot add from object, needs to be added from constructor"}]}]},{"type":"element","tag":"h4","props":{"id":"pros"},"children":[{"type":"text","value":"pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"helps in saving memory"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reducing duplicate variables"}]}]},{"type":"element","tag":"h3","props":{"id":"related"},"children":[{"type":"text","value":"related"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hasOwnProperty"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"but problem with above is that constructor property is lost, therefore we redefine it"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    constructor: Dog,\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// instead of adding each property manually, we can overwrite it with new object\nDog.prototype = {\n    constructor: Dog,\n    numLegs:4,\n    eat:function(){\n        console.log('eat eat eat')\n    },\n    describe:function(){\n        console.log('my name is'+this.name)\n    }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"prototype-properties","depth":3,"text":"Prototype properties"},{"id":"related","depth":3,"text":"related"}]}},"_type":"markdown","_id":"content:programming-languages:js:prototype-properties.md","_source":"content","_file":"programming-languages/js/prototype-properties.md","_extension":"md"}