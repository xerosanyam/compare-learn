{"_path":"/ui-libraries/react/jsx","_dir":"react","_draft":false,"_partial":false,"_locale":"","title":"Jsx","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"jsx"},"children":[{"type":"text","value":"jsx"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"benefit: full programmatic power of js in html"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"not valid js, hence must be converted to js. done using babel transpiler"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"simply include js code within round brace"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"must return a single element"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"tool to write readable html within JS"}]}]},{"type":"element","tag":"pre","props":{"className":["language-jsx"],"code":"const JSX = (\n    <div>\n        {/* some comment here */}\n        <h1 className=\"hello\">Hello</h1>\n    </div>\n)\n//Render JSX\nReactDOM.render(JSX, document.getElementById('challenge-node'))\n","language":"jsx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const JSX = (\n    <div>\n        {/* some comment here */}\n        <h1 className=\"hello\">Hello</h1>\n    </div>\n)\n//Render JSX\nReactDOM.render(JSX, document.getElementById('challenge-node'))\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"class is reserved keyword in JS, therefore JSX uses "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"className"}]},{"type":"text","value":" to define class in html\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"onClick"}]},{"type":"text","value":", instead of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"onclick"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has concept of self-closing tag for all elements\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ex: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<div/>"}]},{"type":"text","value":" = "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<div></div>"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"this is useful in adding react component"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"jsx","depth":3,"text":"jsx"}]}},"_type":"markdown","_id":"content:ui-libraries:react:jsx.md","_source":"content","_file":"ui-libraries/react/jsx.md","_extension":"md"}