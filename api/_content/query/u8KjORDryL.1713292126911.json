{"_path":"/ui-libraries/react/usereducer","_dir":"react","_draft":false,"_partial":false,"_locale":"","title":"UseReducer","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"usereducer"},"children":[{"type":"text","value":"useReducer"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sometimes you want to separate the state logic from the components that make the state changes."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if you have multiple elements of state that typically change together, then having an object that contains those elements of state can be quite helpful."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"as useState"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const countReducer = (state, newState) => newState\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [count, setCount] = React.useReducer(countReducer, initialCount)\n  const increment = () => setCount(count + step)\n  return <button onClick={increment}>{count}</button>\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const countReducer = (state, newState) => newState\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [count, setCount] = React.useReducer(countReducer, initialCount)\n  const increment = () => setCount(count + step)\n  return <button onClick={increment}>{count}</button>\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"compute inside reducer function"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const countReducer = (count, change) => count + change\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [count, changeCount] = React.useReducer(countReducer, initialCount)\n  const increment = () => changeCount(step)\n  return <button onClick={increment}>{count}</button>\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const countReducer = (count, change) => count + change\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [count, changeCount] = React.useReducer(countReducer, initialCount)\n  const increment = () => changeCount(step)\n  return <button onClick={increment}>{count}</button>\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"as callback"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const countReducer = (state, action) => ({\n  ...state,\n  ...(typeof action === 'function' ? action(state) : action),\n})\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [state, setState] = React.useReducer(countReducer, {\n    count: initialCount,\n  })\n  const { count } = state\n  const increment = () =>\n    setState((currentState) => ({ count: currentState.count + step }))\n  return <button onClick={increment}>{count}</button>\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const countReducer = (state, action) => ({\n  ...state,\n  ...(typeof action === 'function' ? action(state) : action),\n})\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [state, setState] = React.useReducer(countReducer, {\n    count: initialCount,\n  })\n  const { count } = state\n  const increment = () =>\n    setState((currentState) => ({ count: currentState.count + step }))\n  return <button onClick={increment}>{count}</button>\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"as dispatch object"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function countReducer(state, action) {\n  const { type, step } = action\n  switch (type) {\n    case 'increment': {\n      return {\n        ...state,\n        count: state.count + step,\n      }\n    }\n    default: {\n      throw new Error(`Unsupported action type: ${type}`)\n    }\n  }\n}\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [state, dispatch] = React.useReducer(countReducer, {\n    count: initialCount,\n  })\n  const { count } = state\n  const increment = () => dispatch({ type: 'increment', step })\n  return <button onClick={increment}>{count}</button>\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function countReducer(state, action) {\n  const { type, step } = action\n  switch (type) {\n    case 'increment': {\n      return {\n        ...state,\n        count: state.count + step,\n      }\n    }\n    default: {\n      throw new Error(`Unsupported action type: ${type}`)\n    }\n  }\n}\n\nfunction Counter({ initialCount = 0, step = 1 }) {\n  const [state, dispatch] = React.useReducer(countReducer, {\n    count: initialCount,\n  })\n  const { count } = state\n  const increment = () => dispatch({ type: 'increment', step })\n  return <button onClick={increment}>{count}</button>\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"usereducer","depth":3,"text":"useReducer"}]}},"_type":"markdown","_id":"content:ui-libraries:react:useReducer.md","_source":"content","_file":"ui-libraries/react/useReducer.md","_extension":"md"}