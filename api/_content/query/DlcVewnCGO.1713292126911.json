[{"_path":"/concurrency/javascript/0.1-async","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":"01 Async","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"async"},"children":[{"type":"text","value":"Async"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"time of running code and Rendering is all tightly defined and deterministic (all thanks to event loop)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"event loop orchestrates the threads and main thread"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"async","depth":2,"text":"Async"}]}},"_type":"markdown","_id":"content:concurrency:javascript:0.0.1 Async.md","_source":"content","_file":"concurrency/javascript/0.0.1 Async.md","_extension":"md"},{"_path":"/concurrency/javascript/1-browser","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":"1 Browser","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"browser"},"children":[{"type":"text","value":"Browser"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rendering Engine\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Examples: Gecko, Webkit, Blink"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Javascript Engine (added late 1990s)\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Call Stack\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Stack Frames"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Heap"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Examples: Spidermonkey, JavascriptCore, V8"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have no knowledge of DOM, setTimeout, HTTP Request"}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Likes to repaint stuff 60 times / second -> 1 time in 16ms"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"browser","depth":2,"text":"Browser"}]}},"_type":"markdown","_id":"content:concurrency:javascript:0.1 Browser.md","_source":"content","_file":"concurrency/javascript/0.1 Browser.md","_extension":"md"},{"_path":"/concurrency/javascript/call-stack","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Call Stack","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"call-stack"},"children":[{"type":"text","value":"Call Stack"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"one thread === one call stack == one thing at a time"}]}]},{"type":"element","tag":"h4","props":{"id":"blocking-call-stack"},"children":[{"type":"text","value":"Blocking Call Stack"}]},{"type":"element","tag":"concurrency-javascript-blocking","props":{},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"call-stack","depth":2,"text":"Call Stack"}]}},"_type":"markdown","_id":"content:concurrency:javascript:1. Call Stack.md","_source":"content","_file":"concurrency/javascript/1. Call Stack.md","_extension":"md"},{"_path":"/concurrency/javascript/web-apis","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Web APIs","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"web-apis"},"children":[{"type":"text","value":"Web APIs"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"perform setTimeout etc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"when they are done they push item on callback queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if they would have pushed directly to stack, ux would be bad.. user is doing something and in middle you would see response"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"web-apis","depth":2,"text":"Web APIs"}]}},"_type":"markdown","_id":"content:concurrency:javascript:2. Web APIs.md","_source":"content","_file":"concurrency/javascript/2. Web APIs.md","_extension":"md"},{"_path":"/concurrency/javascript/call-back-queue","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Call Back Queue","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"call-back-queue-task-queues"},"children":[{"type":"text","value":"Call back Queue / Task Queues"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Receive events from Web APIs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"oldest part of event loop"}]}]},{"type":"element","tag":"h3","props":{"id":"_1-macro-tasks"},"children":[{"type":"text","value":"1. (Macro) Tasks"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"take one item from queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if new item, push to queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"example: setTimeout, setInterval, setImmediate"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-animation-callbacks-requestanimationframe"},"children":[{"type":"text","value":"2. Animation Callbacks - requestAnimationFrame"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"process all elements in queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if new item push to new queue"}]}]},{"type":"element","tag":"h3","props":{"id":"_3-micro-tasks"},"children":[{"type":"text","value":"3. Micro Tasks"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"process all elements in queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if new item, push to same queue and process in same iteration"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"example: process.nextTick, Promise, queueMicrotask"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"call-back-queue-task-queues","depth":2,"text":"Call back Queue / Task Queues","children":[{"id":"_1-macro-tasks","depth":3,"text":"1. (Macro) Tasks"},{"id":"_2-animation-callbacks-requestanimationframe","depth":3,"text":"2. Animation Callbacks - requestAnimationFrame"},{"id":"_3-micro-tasks","depth":3,"text":"3. Micro Tasks"}]}]}},"_type":"markdown","_id":"content:concurrency:javascript:3. Call back Queue.md","_source":"content","_file":"concurrency/javascript/3. Call back Queue.md","_extension":"md"},{"_path":"/concurrency/javascript/event-loop","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Event Loop","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"event-loop"},"children":[{"type":"text","value":"Event Loop"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First we need to understand"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Call Stack"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Web APIs (Browser) <-> C++ APIs (Node)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Callback Queue\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Micro Task Queue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Macro Task Queue"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Event Loop"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Job of event loop is very simple:"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"if (stack.isEmpty) {\n  if (!queue.isEmpty) {\n    const item = queue.shift()\n    stack.push(item)\n  }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if (stack.isEmpty) {\n  if (!queue.isEmpty) {\n    const item = queue.shift()\n    stack.push(item)\n  }\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Shouldn't block the event loop -> don't put blocking code on stack"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"just spins round and round in a cpu efficient manner"}]}]},{"type":"element","tag":"h3","props":{"id":"working"},"children":[{"type":"text","value":"Working:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When we queue a task, event loop takes a detour"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tasks are added to queue, event loop picks a task, waits for it to finish, then picks a new task"}]}]},{"type":"element","tag":"h4","props":{"id":"render-steps"},"children":[{"type":"text","value":"Render Steps:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"to update what is on the screen"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"style calculation (CSS)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Layout - create render tree"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"actual pixel data - painting"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"if you want to do something before browser paints - "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"requestAnimationFrame"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"requestAnimationFrame(() => {\n  console.log('do after 1st animation')\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"requestAnimationFrame(() => {\n  console.log('do after 1st animation')\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"if you want to do something after browser paints - nested use of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"requestAnimationFrame"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"requestAnimationFrame(() => {\n  requestAnimationFrame(() => {\n    console.log('do after 1st animation')\n  })\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"requestAnimationFrame(() => {\n  requestAnimationFrame(() => {\n    console.log('do after 1st animation')\n  })\n})\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"event-loop","depth":2,"text":"Event Loop","children":[{"id":"working","depth":3,"text":"Working:"}]}]}},"_type":"markdown","_id":"content:concurrency:javascript:4. Event Loop.md","_source":"content","_file":"concurrency/javascript/4. Event Loop.md","_extension":"md"},{"_path":"/concurrency/javascript/promise","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Promise","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"promise"},"children":[{"type":"text","value":"Promise"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"3 states"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Pending"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fullfilled"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rejected"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"new Promise(() => {}) // Pending\nnew Promise((res, rej) => res('Yay')) // Fullfilled\nnew Promise((res, rej) => rej('oh no')) // Rejected\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"new Promise(() => {}) // Pending\nnew Promise((res, rej) => res('Yay')) // Fullfilled\nnew Promise((res, rej) => rej('oh no')) // Rejected\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"shorthand syntax"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"Promise.resolve('Yay!')\nPromise.reject('oh no')\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Promise.resolve('Yay!')\nPromise.reject('oh no')\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"console.log('start')\nsetTimeout(() => {\n  console.log('timeout')\n}, 0)\nPromise.resolve('promise!').then((res) => console.log(res))\nconsole.log('end')\n\n// output:\n// start\n// end\n// promise\n// timeout\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"console.log('start')\nsetTimeout(() => {\n  console.log('timeout')\n}, 0)\nPromise.resolve('promise!').then((res) => console.log(res))\nconsole.log('end')\n\n// output:\n// start\n// end\n// promise\n// timeout\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"promise","depth":2,"text":"Promise"}]}},"_type":"markdown","_id":"content:concurrency:javascript:5. Promise.md","_source":"content","_file":"concurrency/javascript/5. Promise.md","_extension":"md"},{"_path":"/concurrency/javascript/async-await","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Async Await","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"async-await"},"children":[{"type":"text","value":"Async-Await"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"introduced in ES7, implicity return promise"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When encountering an await keyword, the async function gets suspended."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The execution of the function body gets paused, and the rest of the async function gets run in a microtask instead of a regular task!"}]}]},{"type":"element","tag":"h4","props":{"id":"difference-bw-await-promise"},"children":[{"type":"text","value":"Difference b/w Await & Promise"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const one = () => Promise.resolve('promise')\nasync function myFunc() {\n  console.log('start of func')\n  const res = await one()\n  console.log(res)\n  console.log('end of func')\n}\nconsole.log('before function')\nmyFunc()\nconsole.log('after function')\n\n//output:\n// before function\n// start of func\n// after function\n// promise\n// end of func\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const one = () => Promise.resolve('promise')\nasync function myFunc() {\n  console.log('start of func')\n  const res = await one()\n  console.log(res)\n  console.log('end of func')\n}\nconsole.log('before function')\nmyFunc()\nconsole.log('after function')\n\n//output:\n// before function\n// start of func\n// after function\n// promise\n// end of func\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const one = () => Promise.resolve('one')\nfunction myFunc() {\n  console.log('start of func')\n  one().then((res) => console.log(res))\n  console.log('end of func')\n}\nconsole.log('before function')\nmyFunc()\nconsole.log('after function')\n\n//output:\n// before function\n// start of func\n// end of func\n// after function\n// promise\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const one = () => Promise.resolve('one')\nfunction myFunc() {\n  console.log('start of func')\n  one().then((res) => console.log(res))\n  console.log('end of func')\n}\nconsole.log('before function')\nmyFunc()\nconsole.log('after function')\n\n//output:\n// before function\n// start of func\n// end of func\n// after function\n// promise\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"async-await","depth":2,"text":"Async-Await"}]}},"_type":"markdown","_id":"content:concurrency:javascript:6. Async-Await.md","_source":"content","_file":"concurrency/javascript/6. Async-Await.md","_extension":"md"},{"_path":"/concurrency/javascript/complete-working","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":" Complete Working","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"complete-working"},"children":[{"type":"text","value":"Complete Working"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"All functions in that are currently in the call stack get executed. When they returned a value, they get popped off the stack."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When the call stack is empty, all queued up microtasks are popped onto the callstack one by one, and get executed! (Microtasks themselves can also return new microtasks, effectively creating an infinite microtask loop 😬)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If both the call stack and microtask queue are empty, the event loop checks if there are tasks left on the (macro)task queue. The tasks get popped onto the callstack, executed, and popped off!"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const callStack = []\nconst microTaskQueue = []\nconst animationQueue = []\nconst taskQueue = []\nwhile (1) {\n  while (callStack.length != 0) {\n    const item = callStack.pop()\n    process(item) // can generate new element on stack; therefore can lead to stack overflow\n  }\n\n  while (microTaskQueue.length > 0) {\n    const item = microTaskQueue.shift()\n    process(item) // can generate new microtask; can create infinite loop\n  }\n\n  const temp = animationQueue\n  animationQueue = []\n  while (temp.length > 0) {\n    const item = temp.shift()\n    process(item) // new items will be added to animationQueue which is different than this\n  }\n\n  if (taskQueue.length != 0) {\n    const item = taskQueue.shift()\n    callStack.push(item)\n  }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const callStack = []\nconst microTaskQueue = []\nconst animationQueue = []\nconst taskQueue = []\nwhile (1) {\n  while (callStack.length != 0) {\n    const item = callStack.pop()\n    process(item) // can generate new element on stack; therefore can lead to stack overflow\n  }\n\n  while (microTaskQueue.length > 0) {\n    const item = microTaskQueue.shift()\n    process(item) // can generate new microtask; can create infinite loop\n  }\n\n  const temp = animationQueue\n  animationQueue = []\n  while (temp.length > 0) {\n    const item = temp.shift()\n    process(item) // new items will be added to animationQueue which is different than this\n  }\n\n  if (taskQueue.length != 0) {\n    const item = taskQueue.shift()\n    callStack.push(item)\n  }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"complete-working","depth":2,"text":"Complete Working"}]}},"_type":"markdown","_id":"content:concurrency:javascript:7. Complete working.md","_source":"content","_file":"concurrency/javascript/7. Complete working.md","_extension":"md"}]