__NUXT_JSONP__("/computer-science/paradigms", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z){return {data:[{javaPages:{intro:{slug:j,toc:[{id:g,depth:k,text:h}],body:{type:l,children:[{type:b,tag:m,props:{id:g},children:[{type:b,tag:n,props:{ariaHidden:o,href:v,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:h}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"At its core, software development solves a problem or achieves a result with computation. The software development process first defines a problem, then presents a solution. Object oriented programming is one of several major approaches to the software development process."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The object structure makes it flexible within a program. Objects can transfer information by calling and passing data to another object's methods. Also, new classes can receive, or inherit, all the features from a base or parent class. This helps to reduce repeated code."}]}]},dir:"\u002Fcomputer-science\u002Fparadigms\u002Fobject",path:"\u002Fcomputer-science\u002Fparadigms\u002Fobject\u002Fintro",extension:t,createdAt:f,updatedAt:f}},jsPages:{intro:{slug:j,toc:[{id:g,depth:k,text:h}],body:{type:l,children:[{type:b,tag:m,props:{id:g},children:[{type:b,tag:n,props:{ariaHidden:o,href:v,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:h}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Functional programming is an approach to software development based around the "},{type:b,tag:u,props:{},children:[{type:a,value:"evaluation of functions"}]},{type:a,value:". Like mathematics, functions in programming map input to output to produce a result. You can combine basic functions in many ways to build more and more complex programs."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Functional programming follows a few core principles:"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Functions are independent from the state of the program or global variables. They only depend on the arguments passed into them to make a calculation"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Functions try to limit any changes to the state of the program and avoid changes to the global objects holding data"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Functions have minimal side effects in the program"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The functional programming software development approach breaks a program into small, testable parts."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"INPUT -\u003E PROCESS -\u003E OUTPUT"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Functional programming is about:"}]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Pure functions - the same input always gives the same output"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled"}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:w,path:"\u002Fcomputer-science\u002Fparadigms\u002Ffunctional\u002Fintro",extension:t,createdAt:f,updatedAt:f},"vs-imperative":{slug:x,toc:[{id:y,depth:k,text:z}],body:{type:l,children:[{type:b,tag:m,props:{id:y},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#how-is-it-different-from-imperative",tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"in english, imperative tense means giving commands"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"imperative programming means, giving computer set of statements to perfom task\n"},{type:b,tag:i,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"often statements change state of prog, like updating global var"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ex\u003E for loop, that gives exact direction to iterate over indices of array"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"functional programming is declarative form of programming\n"},{type:b,tag:i,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"you tell computer what you want done by calling a method"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ex\u003E map() method that can iterate over array w\u002Fo worrying about indexes\n"},{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"fp focuses on "},{type:b,tag:u,props:{},children:[{type:a,value:"what"}]},{type:a,value:". imperative focuses on "},{type:b,tag:u,props:{},children:[{type:a,value:"how"}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:w,path:"\u002Fcomputer-science\u002Fparadigms\u002Ffunctional\u002Fvs-imperative",extension:t,createdAt:f,updatedAt:f}},pages:[j,x]}],fetch:[],mutations:void 0}}("text","element","\n","li","p","2020-12-03T06:42:54.506Z","why","Why?","ul","intro",3,"root","h3","a","true",-1,"span","icon","icon-link",".md","strong","#why","\u002Fcomputer-science\u002Fparadigms\u002Ffunctional","vs-imperative","how-is-it-different-from-imperative","how is it different from imperative?")));